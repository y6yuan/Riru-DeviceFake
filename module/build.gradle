plugins {
    id 'com.android.application'
}

apply from: file(rootProject.file('module.gradle'))

android {
    compileSdkVersion rootProject.ext.targetSdkVersion
    ndkVersion rootProject.ext.ndkVersion
    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        externalNativeBuild {
            cmake {
                arguments "-DMODULE_NAME:STRING=$moduleId",
                        "-DRIRU_MODULE_ID=$moduleId",
                        "-DRIRU_MODULE_API_VERSION=$moduleRiruApiVersion",
                        "-DRIRU_MODULE_VERSION=$moduleVersionCode",
                        "-DRIRU_MODULE_VERSION_NAME:STRING=\"$moduleVersion\""

            }
        }
    }
    buildFeatures {
        prefab true
    }
    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
            version "3.10.2"
        }
    }
}

dependencies {
    implementation 'dev.rikka.ndk:riru:25.0.0'
    implementation 'dev.rikka.ndk.thirdparty:xhook:1.2.0'
    implementation 'dev.rikka.ndk.thirdparty:nativehelper:1.0.0'
}

def outDir = file("$rootDir/out")
def magiskDir = file("$outDir/magisk_module")

import org.apache.tools.ant.filters.FixCrLfFilter

import java.nio.file.Files
import java.security.MessageDigest

static def calcSha256(file) {
    def md = MessageDigest.getInstance("SHA-256")
    file.eachByte 4096, { bytes, size ->
        md.update(bytes, 0, size);
    }
    return md.digest().encodeHex()
}

android.applicationVariants.all { variant ->
    def variantCapped = variant.name.capitalize()
    def variantLowered = variant.name.toLowerCase()

    def zipName = "${moduleId}-${moduleVersion}-${variantLowered}.zip"

    def is_windows = org.gradle.internal.os.OperatingSystem.current().isWindows()

    task("zip${variantCapped}", type: Zip) {
        dependsOn("assemble${variantCapped}")
        from magiskDir
        archiveName zipName
        destinationDir outDir
    }

    variant.outputs.all {
        def task = variant.assembleProvider.get()
        // clear
        delete { delete magiskDir }

        // copy from template
        copy {
            from "$rootDir/template/magisk_module"
            into magiskDir.path
            exclude 'riru.sh'
        }
        // copy riru.sh
        copy {
            from "$rootDir/template/magisk_module"
            into magiskDir.path
            include 'riru.sh'
            filter { line ->
                line.replaceAll('%%%RIRU_MODULE_ID%%%', moduleId)
                        .replaceAll('%%%RIRU_MODULE_API_VERSION%%%', moduleRiruApiVersion.toString())
                        .replaceAll('%%%RIRU_MODULE_MIN_API_VERSION%%%', moduleMinRiruApiVersion.toString())
                        .replaceAll('%%%RIRU_MODULE_MIN_RIRU_VERSION_NAME%%%', moduleMinRiruVersionName)
            }
            filter(FixCrLfFilter.class,
                    eol: FixCrLfFilter.CrLf.newInstance("lf"))
        }
        // copy .git files manually since gradle exclude it by default
        Files.copy(file("$rootDir/template/magisk_module/.gitattributes").toPath(), file("${magiskDir.path}/.gitattributes").toPath())

        // generate module.prop
        def modulePropText = ""
        moduleProp.each { k, v -> modulePropText += "$k=$v\n" }
        modulePropText = modulePropText.trim()
        file("$magiskDir/module.prop").text = modulePropText

        // copy native files
        def nativeOutDir = file("build/intermediates/cmake/$variant.name/obj")
        copy {
            from "$nativeOutDir"
            into "$magiskDir/lib"
            exclude "**/*.txt"
        }

        // generate sha1sum
        fileTree("$magiskDir").matching {
            exclude "README.md", "META-INF"
        }.visit { f ->
            if (f.directory) return
            file(f.file.path + ".sha256sum").text = calcSha256(f.file)
        }

        task.finalizedBy("zip${variantCapped}")
    }

    task("push${variantCapped}", type: Exec) {
        dependsOn("assemble${variantCapped}")
        workingDir outDir
        def commands = [android.adbExecutable, "push",
                        zipName,
                        "/data/local/tmp/"]
        if (is_windows) {
            commandLine 'cmd', '/c', commands.join(" ")
        } else {
            commandLine commands
        }
    }

    task("flash${variantCapped}", type: Exec) {
        dependsOn("push${variantCapped}")
        def commands = [android.adbExecutable, "shell", "su", "-c",
                        "magisk --install-module /data/local/tmp/${zipName}"]
        if (is_windows) {
            commandLine 'cmd', '/c', commands.join(" ")
        } else {
            commandLine commands
        }
    }

    task("flashAndReoot${variantCapped}", type: Exec) {
        dependsOn("flash${variantCapped}")
        def commands = [android.adbExecutable, "shell", "reboot"]
        if (is_windows) {
            commandLine 'cmd', '/c', commands.join(" ")
        } else {
            commandLine commands
        }
    }
}